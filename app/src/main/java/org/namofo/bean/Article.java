package org.namofo.bean;

import org.namofo.sqlite.dao.ArticleDao;
import org.namofo.sqlite.dao.ArticleFileTypeDao;
import org.namofo.sqlite.dao.DaoSession;

import java.io.Serializable;

import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table ARTICLE.
 */
public class Article implements Serializable{

    private Long id;
    private String title;
    private String content;
    private String category;
    private Boolean iscollect;
    private String file_path;
    private Integer start_page;
    private Integer end_page;
    private Long file_type;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient ArticleDao myDao;

    private ArticleFileType articleFileType;
    private Long articleFileType__resolvedKey;


    public Article() {
    }

    public Article(Long id) {
        this.id = id;
    }

    public Article(Long id, String title, String content, String category, Boolean iscollect, String file_path, Integer start_page, Integer end_page, Long file_type) {
        this.id = id;
        this.title = title;
        this.content = content;
        this.category = category;
        this.iscollect = iscollect;
        this.file_path = file_path;
        this.start_page = start_page;
        this.end_page = end_page;
        this.file_type = file_type;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getArticleDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public String getTitle() {
        return title;
    }

    public void setTitle(String title) {
        this.title = title;
    }

    public String getContent() {
        return content;
    }

    public void setContent(String content) {
        this.content = content;
    }

    public String getCategory() {
        return category;
    }

    public void setCategory(String category) {
        this.category = category;
    }

    public Boolean getIscollect() {
        return iscollect;
    }

    public void setIscollect(Boolean iscollect) {
        this.iscollect = iscollect;
    }

    public String getFile_path() {
        return file_path;
    }

    public void setFile_path(String file_path) {
        this.file_path = file_path;
    }

    public Integer getStart_page() {
        return start_page;
    }

    public void setStart_page(Integer start_page) {
        this.start_page = start_page;
    }

    public Integer getEnd_page() {
        return end_page;
    }

    public void setEnd_page(Integer end_page) {
        this.end_page = end_page;
    }

    public Long getFile_type() {
        return file_type;
    }

    public void setFile_type(Long file_type) {
        this.file_type = file_type;
    }

    /** To-one relationship, resolved on first access. */
    public ArticleFileType getArticleFileType() {
        Long __key = this.file_type;
        if (articleFileType__resolvedKey == null || !articleFileType__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            ArticleFileTypeDao targetDao = daoSession.getArticleFileTypeDao();
            ArticleFileType articleFileTypeNew = targetDao.load(__key);
            synchronized (this) {
                articleFileType = articleFileTypeNew;
            	articleFileType__resolvedKey = __key;
            }
        }
        return articleFileType;
    }

    public void setArticleFileType(ArticleFileType articleFileType) {
        synchronized (this) {
            this.articleFileType = articleFileType;
            file_type = articleFileType == null ? null : articleFileType.getId();
            articleFileType__resolvedKey = file_type;
        }
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

}
