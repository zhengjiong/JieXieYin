package org.namofo.sqlite.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import org.namofo.bean.Article;
import org.namofo.bean.ArticleFileType;

import java.util.ArrayList;
import java.util.List;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.SqlUtils;
import de.greenrobot.dao.internal.DaoConfig;


// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table ARTICLE.
*/
public class ArticleDao extends AbstractDao<Article, Long> {

    public static final String TABLENAME = "ARTICLE";

    /**
     * Properties of entity Article.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "ID");
        public final static Property Title = new Property(1, String.class, "title", false, "TITLE");
        public final static Property Content = new Property(2, String.class, "content", false, "CONTENT");
        public final static Property Category = new Property(3, String.class, "category", false, "CATEGORY");
        public final static Property Iscollect = new Property(4, Boolean.class, "iscollect", false, "ISCOLLECT");
        public final static Property File_path = new Property(5, String.class, "file_path", false, "FILE_PATH");
        public final static Property Start_page = new Property(6, Integer.class, "start_page", false, "START_PAGE");
        public final static Property End_page = new Property(7, Integer.class, "end_page", false, "END_PAGE");
        public final static Property File_type = new Property(8, Long.class, "file_type", false, "FILE_TYPE");
    };

    private DaoSession daoSession;


    public ArticleDao(DaoConfig config) {
        super(config);
    }
    
    public ArticleDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'ARTICLE' (" + //
                "'ID' INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "'TITLE' TEXT," + // 1: title
                "'CONTENT' TEXT," + // 2: content
                "'CATEGORY' TEXT," + // 3: category
                "'ISCOLLECT' INTEGER," + // 4: iscollect
                "'FILE_PATH' TEXT," + // 5: file_path
                "'START_PAGE' INTEGER," + // 6: start_page
                "'END_PAGE' INTEGER," + // 7: end_page
                "'FILE_TYPE' INTEGER);"); // 8: file_type
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'ARTICLE'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Article entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(2, title);
        }
 
        String content = entity.getContent();
        if (content != null) {
            stmt.bindString(3, content);
        }
 
        String category = entity.getCategory();
        if (category != null) {
            stmt.bindString(4, category);
        }
 
        Boolean iscollect = entity.getIscollect();
        if (iscollect != null) {
            stmt.bindLong(5, iscollect ? 1l: 0l);
        }
 
        String file_path = entity.getFile_path();
        if (file_path != null) {
            stmt.bindString(6, file_path);
        }
 
        Integer start_page = entity.getStart_page();
        if (start_page != null) {
            stmt.bindLong(7, start_page);
        }
 
        Integer end_page = entity.getEnd_page();
        if (end_page != null) {
            stmt.bindLong(8, end_page);
        }
 
        Long file_type = entity.getFile_type();
        if (file_type != null) {
            stmt.bindLong(9, file_type);
        }
    }

    @Override
    protected void attachEntity(Article entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Article readEntity(Cursor cursor, int offset) {
        Article entity = new Article( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // title
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // content
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // category
            cursor.isNull(offset + 4) ? null : cursor.getShort(offset + 4) != 0, // iscollect
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // file_path
            cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6), // start_page
            cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7), // end_page
            cursor.isNull(offset + 8) ? null : cursor.getLong(offset + 8) // file_type
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Article entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setTitle(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setContent(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setCategory(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setIscollect(cursor.isNull(offset + 4) ? null : cursor.getShort(offset + 4) != 0);
        entity.setFile_path(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setStart_page(cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6));
        entity.setEnd_page(cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7));
        entity.setFile_type(cursor.isNull(offset + 8) ? null : cursor.getLong(offset + 8));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Article entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Article entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
    private String selectDeep;

    protected String getSelectDeep() {
        if (selectDeep == null) {
            StringBuilder builder = new StringBuilder("SELECT ");
            SqlUtils.appendColumns(builder, "T", getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T0", daoSession.getArticleFileTypeDao().getAllColumns());
            builder.append(" FROM ARTICLE T");
            builder.append(" LEFT JOIN article_file_type T0 ON T.'FILE_TYPE'=T0.'ID'");
            builder.append(' ');
            selectDeep = builder.toString();
        }
        return selectDeep;
    }
    
    protected Article loadCurrentDeep(Cursor cursor, boolean lock) {
        Article entity = loadCurrent(cursor, 0, lock);
        int offset = getAllColumns().length;

        ArticleFileType articleFileType = loadCurrentOther(daoSession.getArticleFileTypeDao(), cursor, offset);
        entity.setArticleFileType(articleFileType);

        return entity;    
    }

    public Article loadDeep(Long key) {
        assertSinglePk();
        if (key == null) {
            return null;
        }

        StringBuilder builder = new StringBuilder(getSelectDeep());
        builder.append("WHERE ");
        SqlUtils.appendColumnsEqValue(builder, "T", getPkColumns());
        String sql = builder.toString();
        
        String[] keyArray = new String[] { key.toString() };
        Cursor cursor = db.rawQuery(sql, keyArray);
        
        try {
            boolean available = cursor.moveToFirst();
            if (!available) {
                return null;
            } else if (!cursor.isLast()) {
                throw new IllegalStateException("Expected unique result, but count was " + cursor.getCount());
            }
            return loadCurrentDeep(cursor, true);
        } finally {
            cursor.close();
        }
    }
    
    /** Reads all available rows from the given cursor and returns a list of new ImageTO objects. */
    public List<Article> loadAllDeepFromCursor(Cursor cursor) {
        int count = cursor.getCount();
        List<Article> list = new ArrayList<Article>(count);
        
        if (cursor.moveToFirst()) {
            if (identityScope != null) {
                identityScope.lock();
                identityScope.reserveRoom(count);
            }
            try {
                do {
                    list.add(loadCurrentDeep(cursor, false));
                } while (cursor.moveToNext());
            } finally {
                if (identityScope != null) {
                    identityScope.unlock();
                }
            }
        }
        return list;
    }
    
    protected List<Article> loadDeepAllAndCloseCursor(Cursor cursor) {
        try {
            return loadAllDeepFromCursor(cursor);
        } finally {
            cursor.close();
        }
    }
    

    /** A raw-style query where you can pass any WHERE clause and arguments. */
    public List<Article> queryDeep(String where, String... selectionArg) {
        Cursor cursor = db.rawQuery(getSelectDeep() + where, selectionArg);
        return loadDeepAllAndCloseCursor(cursor);
    }
 
}
